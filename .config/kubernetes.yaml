
# kubecolor apply -f kubernetes.yaml

kind: Namespace
apiVersion: v1
metadata:
  name: startsch

---

kind: ConfigMap
apiVersion: v1
metadata:
  namespace: startsch
  name: startsch-config
data:
  Logging__LogLevel__Microsoft.AspNetCore: Warning
  Logging__LogLevel__Microsoft.AspNetCore.Authentication: Warning
  Logging__LogLevel__Microsoft.AspNetCore.Authorization: Warning
  Logging__LogLevel__Microsoft.AspNetCore.Components: Warning
  Logging__LogLevel__Microsoft.AspNetCore.Hosting: Warning
  Logging__LogLevel__Microsoft.AspNetCore.HttpOverrides: Warning
  Logging__LogLevel__Microsoft.AspNetCore.Server: Warning
  Logging__LogLevel__Microsoft.EntityFrameworkCore: Information
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Migrations: Information
  Logging__LogLevel__Microsoft.Hosting: Information
  Logging__LogLevel__StartSch: Trace

---

kind: Secret
apiVersion: v1
metadata:
  namespace: startsch
  name: startsch-secrets

---

kind: Service
apiVersion: v1
metadata:
  namespace: startsch
  name: startsch
spec:
  selector:
    app.kubernetes.io/name: startsch
    app.kubernetes.io/component: server
  ports:
    - name: http
      port: 80
      targetPort: http

---

kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  namespace: startsch
  name: startsch
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    acme.cert-manager.io/http01-ingress-class: traefik
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - start.sch.bme.hu
      secretName: startsch-tls-cert
  rules:
    - host: start.sch.bme.hu
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: startsch
                port:
                  name: http

---

kind: Secret
apiVersion: v1
metadata:
  namespace: startsch
  name: startsch-backups-secrets

---

kind: ObjectStore
apiVersion: barmancloud.cnpg.io/v1
metadata:
  name: startsch-backups
  namespace: startsch
spec:
  configuration:
    destinationPath: s3://startsch-backups/
    endpointURL: https://s3.eu-central-003.backblazeb2.com
    s3Credentials:
      accessKeyId:
        name: startsch-backups-secrets
        key: ACCESS_KEY_ID
      secretAccessKey:
        name: startsch-backups-secrets
        key: ACCESS_SECRET_KEY
    wal:
      compression: gzip
      maxParallel: 8

---

kind: Cluster
apiVersion: postgresql.cnpg.io/v1
metadata:
  namespace: startsch
  name: startsch-db
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: postgres-startsch
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: startsch
  annotations: { }
spec:
  primaryUpdateStrategy: unsupervised
  primaryUpdateMethod: switchover
  instances: 2
  imagePullPolicy: Always
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb:
      database: startsch
      owner: startsch
  postgresql:
    parameters:
      wal_level: replica
      shared_buffers: 128MB
  resources:
    limits:
      cpu: '1'
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  storage:
    size: 1.5Gi
    storageClass: node-local-zfs
  plugins:
    - name: barman-cloud.cloudnative-pg.io
      isWALArchiver: true
      parameters:
        barmanObjectName: startsch-backups

---

# Restoring a Postgres cluster from a backup:
#kind: Cluster
#apiVersion: postgresql.cnpg.io/v1
#metadata:
#  namespace: startsch
#  name: startsch-db-restore
#spec:
#  primaryUpdateStrategy: unsupervised
#  primaryUpdateMethod: switchover
#  instances: 1
#  bootstrap:
#    recovery:
#      source: source
#  externalClusters:
#    - name: source
#      plugin:
#        name: barman-cloud.cloudnative-pg.io
#        parameters:
#          barmanObjectName: startsch-backups
#          serverName: startsch-db
#  postgresql:
#    parameters:
#      wal_level: replica
#      shared_buffers: 128MB
#  resources:
#    limits:
#      cpu: '1'
#      memory: 512Mi
#    requests:
#      cpu: 100m
#      memory: 256Mi
#  storage:
#    size: 1.5Gi
#    storageClass: node-local-zfs

---

kind: ScheduledBackup
apiVersion: postgresql.cnpg.io/v1
metadata:
  name: startsch-backup
  namespace: startsch
spec:
  cluster:
    name: startsch-db
  schedule: "0 24 3 * * *"  # At 3:24 every day
  backupOwnerReference: self
  method: plugin
  pluginConfiguration:
    name: barman-cloud.cloudnative-pg.io

---

kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: startsch
  name: startsch
  labels:
    app.kubernetes.io/name: startsch
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: startsch
      app.kubernetes.io/component: server
  template:
    metadata:
      namespace: startsch
      name: startsch
      labels:
        app.kubernetes.io/name: startsch
        app.kubernetes.io/component: server
    spec:
      containers:
        - name: startsch
          image: ghcr.io/kir-dev/startsch
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
              name: http
          env:
            - name: DBHOST
              valueFrom:
                secretKeyRef:
                  name: startsch-db-app
                  key: host
            - name: DBNAME
              valueFrom:
                secretKeyRef:
                  name: startsch-db-app
                  key: dbname
            - name: DBUSER
              valueFrom:
                secretKeyRef:
                  name: startsch-db-app
                  key: user
            - name: DBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: startsch-db-app
                  key: password
            - name: ConnectionStrings__Postgres
              value: "Host=$(DBHOST); Database=$(DBNAME); Username=$(DBUSER); Password=$(DBPASSWORD);"
          envFrom:
            - configMapRef:
                name: startsch-config
            - secretRef:
                name: startsch-secrets
          resources:
            limits:
              cpu: '1'
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
      restartPolicy: Always

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: startsch
  namespace: kube-prometheus-stack
spec:
  podMetricsEndpoints:
    - port: http
      path: /metrics
  namespaceSelector:
    matchNames:
      - startsch
  selector:
    matchLabels:
      app.kubernetes.io/name: startsch
      app.kubernetes.io/component: server
