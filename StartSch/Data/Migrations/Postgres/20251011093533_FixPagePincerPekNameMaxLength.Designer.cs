// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StartSch.Data.Migrations;

#nullable disable

namespace StartSch.Data.Migrations.Postgres
{
    [DbContext(typeof(PostgresDb))]
    [Migration("20251011093533_FixPagePincerPekNameMaxLength")]
    partial class FixPagePincerPekNameMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("StartSch.Data.BackgroundTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTime?>("WaitUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Discriminator", "WaitUntil", "Created");

                    b.ToTable("BackgroundTasks");

                    b.HasDiscriminator().HasValue("BackgroundTask");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExternalIdInt")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PageId", "ExternalIdInt")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInclude", b =>
                {
                    b.Property<int>("IncludedId")
                        .HasColumnType("integer");

                    b.Property<int>("IncluderId")
                        .HasColumnType("integer");

                    b.HasKey("IncludedId", "IncluderId");

                    b.HasIndex("IncluderId");

                    b.ToTable("CategoryIncludes");
                });

            modelBuilder.Entity("StartSch.Data.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentHtml")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)");

                    b.Property<string>("FromEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionMarkdown")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExternalIdInt")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "ExternalIdInt")
                        .IsUnique();

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.EventCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("StartSch.Data.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasDiscriminator().HasValue("Interest");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.InterestSubscription", b =>
                {
                    b.Property<int>("InterestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("InterestId", "UserId");

                    b.HasIndex("UserId", "InterestId");

                    b.ToTable("InterestSubscriptions");
                });

            modelBuilder.Entity("StartSch.Data.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PekId")
                        .HasColumnType("integer");

                    b.Property<string>("PekName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PincerId")
                        .HasColumnType("integer");

                    b.Property<string>("PincerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUrl")
                        .IsUnique();

                    b.HasIndex("PekId")
                        .IsUnique();

                    b.HasIndex("PekName")
                        .IsUnique();

                    b.HasIndex("PincerId")
                        .IsUnique();

                    b.HasIndex("PincerName")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentMarkdown")
                        .HasMaxLength(200000)
                        .HasColumnType("character varying(200000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("ExcerptMarkdown")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("ExternalIdInt")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "ExternalIdInt")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("StartSch.Data.PostCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("StartSch.Data.PushNotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Topic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Urgency")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PushNotificationMessages");
                });

            modelBuilder.Entity("StartSch.Data.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("P256DH")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Endpoint")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("StartSch.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthSchEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("AuthSchId")
                        .HasColumnType("uuid");

                    b.Property<string>("StartSchEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("StartSchEmailVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthSchId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StartSch.Data.CreateOrderingStartedNotifications", b =>
                {
                    b.HasBaseType("StartSch.Data.BackgroundTask");

                    b.Property<int>("PincerOpeningId")
                        .HasColumnType("integer");

                    b.HasIndex("PincerOpeningId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CreateOrderingStartedNotifications");
                });

            modelBuilder.Entity("StartSch.Data.CreatePostPublishedNotifications", b =>
                {
                    b.HasBaseType("StartSch.Data.BackgroundTask");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("CreatePostPublishedNotifications");
                });

            modelBuilder.Entity("StartSch.Data.SendEmail", b =>
                {
                    b.HasBaseType("StartSch.Data.BackgroundTask");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("SendEmail");
                });

            modelBuilder.Entity("StartSch.Data.SendPushNotification", b =>
                {
                    b.HasBaseType("StartSch.Data.BackgroundTask");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("BackgroundTasks", t =>
                        {
                            t.Property("MessageId")
                                .HasColumnName("SendPushNotification_MessageId");

                            t.Property("UserId")
                                .HasColumnName("SendPushNotification_UserId");
                        });

                    b.HasDiscriminator().HasValue("SendPushNotification");
                });

            modelBuilder.Entity("StartSch.Data.PincerOpening", b =>
                {
                    b.HasBaseType("StartSch.Data.Event");

                    b.Property<DateTime?>("OrderingEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OrderingStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OutOfStock")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PincerId")
                        .HasColumnType("integer");

                    b.HasIndex("PincerId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("PincerOpening");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInterest", b =>
                {
                    b.HasBaseType("StartSch.Data.Interest");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("CategoryInterest");
                });

            modelBuilder.Entity("StartSch.Data.EventInterest", b =>
                {
                    b.HasBaseType("StartSch.Data.Interest");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue("EventInterest");
                });

            modelBuilder.Entity("StartSch.Data.EmailWhenOrderingStartedInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("EmailWhenOrderingStartedInCategory");
                });

            modelBuilder.Entity("StartSch.Data.EmailWhenPostPublishedInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("EmailWhenPostPublishedInCategory");
                });

            modelBuilder.Entity("StartSch.Data.PushWhenOrderingStartedInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("PushWhenOrderingStartedInCategory");
                });

            modelBuilder.Entity("StartSch.Data.PushWhenPostPublishedInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("PushWhenPostPublishedInCategory");
                });

            modelBuilder.Entity("StartSch.Data.ShowEventsInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("ShowEventsInCategory");
                });

            modelBuilder.Entity("StartSch.Data.ShowPostsInCategory", b =>
                {
                    b.HasBaseType("StartSch.Data.CategoryInterest");

                    b.HasDiscriminator().HasValue("ShowPostsInCategory");
                });

            modelBuilder.Entity("StartSch.Data.EmailWhenPostPublishedForEvent", b =>
                {
                    b.HasBaseType("StartSch.Data.EventInterest");

                    b.HasDiscriminator().HasValue("EmailWhenPostPublishedForEvent");
                });

            modelBuilder.Entity("StartSch.Data.PushWhenPostPublishedForEvent", b =>
                {
                    b.HasBaseType("StartSch.Data.EventInterest");

                    b.HasDiscriminator().HasValue("PushWhenPostPublishedForEvent");
                });

            modelBuilder.Entity("StartSch.Data.ShowPostsForEvent", b =>
                {
                    b.HasBaseType("StartSch.Data.EventInterest");

                    b.HasDiscriminator().HasValue("ShowPostsForEvent");
                });

            modelBuilder.Entity("StartSch.Data.Category", b =>
                {
                    b.HasOne("StartSch.Data.Page", "Page")
                        .WithMany("Categories")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInclude", b =>
                {
                    b.HasOne("StartSch.Data.Category", "Included")
                        .WithMany("IncluderCategoryIncludes")
                        .HasForeignKey("IncludedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Category", "Includer")
                        .WithMany("IncludedCategoryIncludes")
                        .HasForeignKey("IncluderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Included");

                    b.Navigation("Includer");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("StartSch.Data.EventCategory", b =>
                {
                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Event", null)
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartSch.Data.InterestSubscription", b =>
                {
                    b.HasOne("StartSch.Data.Interest", "Interest")
                        .WithMany("Subscriptions")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany("InterestSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StartSch.Data.PostCategory", b =>
                {
                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Post", null)
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartSch.Data.PushSubscription", b =>
                {
                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany("PushSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.CreateOrderingStartedNotifications", b =>
                {
                    b.HasOne("StartSch.Data.PincerOpening", "PincerOpening")
                        .WithOne("CreateOrderingStartedNotifications")
                        .HasForeignKey("StartSch.Data.CreateOrderingStartedNotifications", "PincerOpeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PincerOpening");
                });

            modelBuilder.Entity("StartSch.Data.CreatePostPublishedNotifications", b =>
                {
                    b.HasOne("StartSch.Data.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("StartSch.Data.SendEmail", b =>
                {
                    b.HasOne("StartSch.Data.EmailMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.SendPushNotification", b =>
                {
                    b.HasOne("StartSch.Data.PushNotificationMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInterest", b =>
                {
                    b.HasOne("StartSch.Data.Category", "Category")
                        .WithMany("Interests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StartSch.Data.EventInterest", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StartSch.Data.Category", b =>
                {
                    b.Navigation("IncludedCategoryIncludes");

                    b.Navigation("IncluderCategoryIncludes");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("EventCategories");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("StartSch.Data.Interest", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("StartSch.Data.Page", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("StartSch.Data.User", b =>
                {
                    b.Navigation("InterestSubscriptions");

                    b.Navigation("PushSubscriptions");
                });

            modelBuilder.Entity("StartSch.Data.PincerOpening", b =>
                {
                    b.Navigation("CreateOrderingStartedNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
