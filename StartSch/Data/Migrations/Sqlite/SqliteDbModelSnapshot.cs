// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StartSch.Data.Migrations;

#nullable disable

namespace StartSch.Data.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDb))]
    partial class SqliteDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("StartSch.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInclude", b =>
                {
                    b.Property<int>("IncludedCategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncluderCategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncludedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncluderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IncludedCategoriesId", "IncluderCategoriesId");

                    b.HasIndex("IncludedId");

                    b.HasIndex("IncluderCategoriesId");

                    b.HasIndex("IncluderId");

                    b.ToTable("CategoryIncludes");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionMarkdown")
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.EventCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("StartSch.Data.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasDiscriminator().HasValue("Interest");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.InterestSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int>("InterestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("UserId");

                    b.ToTable("InterestSubscriptions");

                    b.HasDiscriminator().HasValue("InterestSubscription");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasDiscriminator().HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.NotificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationRequests");

                    b.HasDiscriminator().HasValue("NotificationRequest");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StartSch.Data.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PekId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PekName")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PincerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PincerName")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodeIdentifier")
                        .IsUnique();

                    b.HasIndex("PekId")
                        .IsUnique();

                    b.HasIndex("PekName")
                        .IsUnique();

                    b.HasIndex("PincerId")
                        .IsUnique();

                    b.HasIndex("PincerName")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentMarkdown")
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExcerptMarkdown")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("StartSch.Data.PostCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("StartSch.Data.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("P256DH")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Endpoint")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("StartSch.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthSchEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AuthSchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartSchEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("StartSchEmailVerified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthSchId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StartSch.Data.PincerOpening", b =>
                {
                    b.HasBaseType("StartSch.Data.Event");

                    b.Property<DateTime?>("OrderingEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OrderingStartUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OutOfStockUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("PincerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PincerId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("PincerOpening");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInterest", b =>
                {
                    b.HasBaseType("StartSch.Data.Interest");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("CategoryInterest");
                });

            modelBuilder.Entity("StartSch.Data.EventInterest", b =>
                {
                    b.HasBaseType("StartSch.Data.Interest");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue("EventInterest");
                });

            modelBuilder.Entity("StartSch.Data.OrderingStartInterest", b =>
                {
                    b.HasBaseType("StartSch.Data.Interest");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CategoryId");

                    b.ToTable("Interests", t =>
                        {
                            t.Property("CategoryId")
                                .HasColumnName("OrderingStartInterest_CategoryId");
                        });

                    b.HasDiscriminator().HasValue("OrderingStartInterest");
                });

            modelBuilder.Entity("StartSch.Data.EmailInterestSubscription", b =>
                {
                    b.HasBaseType("StartSch.Data.InterestSubscription");

                    b.HasDiscriminator().HasValue("EmailInterestSubscription");
                });

            modelBuilder.Entity("StartSch.Data.HomepageInterestSubscription", b =>
                {
                    b.HasBaseType("StartSch.Data.InterestSubscription");

                    b.HasDiscriminator().HasValue("HomepageInterestSubscription");
                });

            modelBuilder.Entity("StartSch.Data.PushInterestSubscription", b =>
                {
                    b.HasBaseType("StartSch.Data.InterestSubscription");

                    b.HasDiscriminator().HasValue("PushInterestSubscription");
                });

            modelBuilder.Entity("StartSch.Data.OrderingStartedNotification", b =>
                {
                    b.HasBaseType("StartSch.Data.Notification");

                    b.Property<int>("OpeningId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OpeningId");

                    b.HasDiscriminator().HasValue("OrderingStartedNotification");
                });

            modelBuilder.Entity("StartSch.Data.PostNotification", b =>
                {
                    b.HasBaseType("StartSch.Data.Notification");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostNotification");
                });

            modelBuilder.Entity("StartSch.Data.EmailRequest", b =>
                {
                    b.HasBaseType("StartSch.Data.NotificationRequest");

                    b.HasDiscriminator().HasValue("EmailRequest");
                });

            modelBuilder.Entity("StartSch.Data.PushRequest", b =>
                {
                    b.HasBaseType("StartSch.Data.NotificationRequest");

                    b.HasDiscriminator().HasValue("PushRequest");
                });

            modelBuilder.Entity("StartSch.Data.Category", b =>
                {
                    b.HasOne("StartSch.Data.Page", "Page")
                        .WithMany("Categories")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInclude", b =>
                {
                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("IncludedCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Category", "Included")
                        .WithMany()
                        .HasForeignKey("IncludedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("IncluderCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Category", "Includer")
                        .WithMany()
                        .HasForeignKey("IncluderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Included");

                    b.Navigation("Includer");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("StartSch.Data.EventCategory", b =>
                {
                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Event", null)
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartSch.Data.InterestSubscription", b =>
                {
                    b.HasOne("StartSch.Data.Interest", "Interest")
                        .WithMany("Subscriptions")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany("InterestSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.NotificationRequest", b =>
                {
                    b.HasOne("StartSch.Data.Notification", "Notification")
                        .WithMany("Requests")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StartSch.Data.PostCategory", b =>
                {
                    b.HasOne("StartSch.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StartSch.Data.Post", null)
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StartSch.Data.PushSubscription", b =>
                {
                    b.HasOne("StartSch.Data.User", "User")
                        .WithMany("PushSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StartSch.Data.CategoryInterest", b =>
                {
                    b.HasOne("StartSch.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StartSch.Data.EventInterest", b =>
                {
                    b.HasOne("StartSch.Data.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StartSch.Data.OrderingStartInterest", b =>
                {
                    b.HasOne("StartSch.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StartSch.Data.OrderingStartedNotification", b =>
                {
                    b.HasOne("StartSch.Data.PincerOpening", "Opening")
                        .WithMany()
                        .HasForeignKey("OpeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opening");
                });

            modelBuilder.Entity("StartSch.Data.PostNotification", b =>
                {
                    b.HasOne("StartSch.Data.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("StartSch.Data.Event", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("EventCategories");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("StartSch.Data.Interest", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("StartSch.Data.Notification", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("StartSch.Data.Page", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("StartSch.Data.Post", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("StartSch.Data.User", b =>
                {
                    b.Navigation("InterestSubscriptions");

                    b.Navigation("PushSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
