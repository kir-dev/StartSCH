@page "/preferences"
@using StartSch.Services
@using StartSch.Wasm
@inject Db Db
@inject InterestService InterestService
@attribute [StreamRendering]

<Title>Beállítások</Title>

<AuthorizeView>
    <NotAuthorized>
        A beállítások módosítása előtt jelentkezz be:
        <div style="margin: 16px 16px 32px;">
            <LogInAndReturnButton/>
        </div>
    </NotAuthorized>
    <Authorized>
        <div style="margin-bottom: 8px">
            <EmailAddressManager/>
        </div>
    </Authorized>
</AuthorizeView>

@if (_userInterests?.Any(i => i is PushWhenOrderingStartedInCategory or PushWhenPostPublishedForEvent or PushWhenPostPublishedInCategory) ?? false)
{
    <PushSubscriptionManager
        IsEnabled="@true"
        RegisteredEndpointHashes="@_subscriptionEndpointHashes" />
}

@if (_followedCategories?.Count > 0)
{
    <h2>Követett oldalak és kategóriák</h2>
    <CategoryList Categories="@_followedCategories" Expanded />
}

@code {

    private List<string> _subscriptionEndpointHashes = [];
    private List<Interest>? _userInterests;
    private List<Category>? _followedCategories;

    [CascadingParameter] public required Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationState;
        if (auth.User.Identity is not { IsAuthenticated: true })
            return;
        int userId = auth.User.GetId();

        var interestIndex = await InterestService.LoadIndex;
        
        var interestIds = await InterestService.GetInterestIds(userId);
        _userInterests = interestIndex.GetInterests(interestIds);

        _followedCategories = _userInterests
            .OfType<CategoryInterest>()
            .Select(i => i.Category)
            .Distinct()
            .ToList();

        _subscriptionEndpointHashes = await Db.PushSubscriptions
            .AsNoTracking()
            .Where(s => s.UserId == userId)
            .Select(s => SharedUtils.ComputeSha256(s.Endpoint))
            .ToListAsync();
    }

}
