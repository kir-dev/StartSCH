@page "/events/{EventId:int}"
@attribute [StreamRendering]

@inherits ResourcePage
@inject Db Db

@if (!IsResourceAvailable(_event, ResourceAccessRequirement.Read, out var status))
{
    <ResourceUnavailable Status="@status"/>
}
else
{
    <PageTitle>@_event.Title</PageTitle>

    <main>
        <EventView Event="@_event"/>

        <hr>

        <div style="margin-top: 16px">
            @foreach (object o in _event.Children
                 .Concat<object>(_event.Posts)
                 .OrderByDescending(o => o switch
                 {
                     Event e => e.StartUtc,
                     Post p => p.CreatedUtc,
                     _ => throw new InvalidOperationException()
                 })
            )
            {
                var key = o switch
                {
                    Event e => e.Id,
                    Post p => int.MaxValue - p.Id,
                    _ => throw new InvalidOperationException()
                };
                <div @key="@key">
                    @switch (o)
                    {
                        case Event e:
                            <EventPreviewTree Event="@e" ParentKnown="@true"/>
                            break;
                        case Post p:
                            <PostPreview Post="@p" EventKnown="@true"/>
                            break;
                    }
                </div>
            }
        </div>
    </main>
}

@code {
    private Event? _event;

    [Parameter] public int EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var tx = await Db.BeginSnapshotTransactionAsync();

        _event = await Db.Events
            .Include(e => e.Parent)
            .Include(e => e.Categories)
            .ThenInclude(c => c.Page)
            .FirstOrDefaultAsync(e => e.Id == EventId);
        StateHasChanged();

        if (_event == null)
        {
            await tx.CommitAsync();
            return;
        }

        await Db.Events
            .GetDescendants(_event.Id)
            .Include(e => e.Categories)
            .ThenInclude(c => c.Page)
            .LoadAsync();
        StateHasChanged();

        await Db.Posts
            .GetPostsForEvent(_event.Id)
            .Include(p => p.Categories)
            .ThenInclude(c => c.Page)
            .LoadAsync();
        StateHasChanged();

        await tx.CommitAsync();
    }

}
