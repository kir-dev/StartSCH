@page "/posts/{PostId:int}/delete"
@rendermode InteractiveServerWithoutPrerendering
@inherits ResourcePage
@inject Db Db
@inject IAuthorizationService Auth
@inject NavigationManager Nav

@if (!IsResourceAvailable(_post, ResourceAccessRequirement.Write, out var status))
{
    <ResourceUnavailable Status="@status"/>
    return;
}

<Title>Poszt törlése</Title>

Biztosan törölni szeretnéd ezt a posztot?

<div style="margin: 16px">
    <PostPreview Post="@_post"/>
</div>

<md-filled-button @onclick="@Delete" class="error" disabled="@_isBusy" type="submit">
    Törlés
</md-filled-button>

@code {

    private Post? _post;
    private bool _isBusy;

    [Parameter] public int PostId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_isBusy) return;
        _isBusy = true;

        _post = await Db.Posts
            .Include(p => p.Categories)
            .ThenInclude(c => c.Page)
            .AsNoTrackingWithIdentityResolution()
            .FirstOrDefaultAsync(p => p.Id == PostId);

        _isBusy = false;
    }

    private async Task Delete()
    {
        if (_isBusy) return;
        _isBusy = true;
        StateHasChanged();

        Post? post = await Db.Posts
            .Include(p => p.Categories)
            .ThenInclude(c => c.Page)
            .FirstOrDefaultAsync(p => p.Id == PostId);
        if (post == null)
            return;
        var authRes = await Auth.AuthorizeAsync(await User, post, ResourceAccessRequirement.Write);
        if (!authRes.Succeeded)
            return;
        Db.Posts.Remove(post);
        await Db.SaveChangesAsync();

        Nav.NavigateTo("/");
    }

}
