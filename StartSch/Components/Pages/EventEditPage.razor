@page "/events/{EventId:int}/edit"
@using StartSch.Services
@inject IDbContextFactory<Db> DbFactory
@inject NavigationManager Navigation
@inject IServiceProvider ServiceProvider
@inherits ResourcePage
@rendermode InteractiveServerWithoutPrerendering

@if (!IsResourceAvailable(_event, ResourceAccessRequirement.Write, out var unavailableStatus))
{
    <ResourceUnavailable Status="@unavailableStatus"/>
    return;
}

<div style="display: flex; gap: 32px">
    <div style="flex: 1">
        @if (_event.Id == 0)
        {
            <Title>Új esemény</Title>
        }
        else
        {
            <Title>Esemény szerkesztés</Title>
        }

        <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit" FormName="EventEditor">

            <div style="margin-top: 8px">
                <label>
                    <span style="display: block">
                        Cím
                    </span>
                    <InputText @bind-Value="@_model.Title" class="block"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Szülő esemény
                    </span>
                    <InputSelect @bind-Value="@_model.ParentId">
                        <option value=""></option>
                        @foreach (var e in _possibleParents)
                        {
                            <option value="@e.Id">
                                @e.Title - @Utils.FormatDateRange(e.StartUtc, e.EndUtc)
                            </option>
                        }
                    </InputSelect>
                </label>
            </div>

            <div style="margin-top: 8px">
                <label>
                    <span style="display: block">
                        Kezdete
                    </span>
                    <InputDate TValue="DateTime" @bind-Value="@_model.Start" Type="InputDateType.DateTimeLocal"/>
                </label>
            </div>

            <div style="margin-top: 8px">
                <label>
                    <span style="display: block">
                        Vége
                    </span>
                    <InputDate TValue="DateTime" @bind-Value="@_model.End" Type="InputDateType.DateTimeLocal"/>
                </label>
            </div>

            <div style="margin-top: 8px">
                <label>
                    <span style="display: block">
                        Leírás
                        <small>(Markdown/HTML)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 256px; font-family: monospace"
                        @bind-Value="@_model.DescriptionMarkdown"/>
                </label>
            </div>

            <div style="display: flex; gap: 8px; margin-top: 8px">
                <FilledButton type="submit" Disabled="@_isBusy">
                    Mentés
                </FilledButton>

                @if (EventId != 0)
                {
                    <TextButton Href="@($"/events/{_event.Id}/delete")" Class="error" Disabled="@_isBusy">
                        Törlés
                    </TextButton>
                }
            </div>
        </EditForm>
    </div>

    <div class="edit-preview-container" style="flex: 1; align-self: flex-start;">

        @{
            _event.StartUtc = TimeZoneInfo.ConvertTimeToUtc(_model.Start, Utils.HungarianTimeZone);
            _event.EndUtc = TimeZoneInfo.ConvertTimeToUtc(_model.End, Utils.HungarianTimeZone);
            _event.Title = _model.Title;
            _event.DescriptionMarkdown = _model.DescriptionMarkdown;
        }
        <EventEditPreview Event="@_event"/>

    </div>
</div>

@code {

    private Event? _event;
    private readonly List<Event> _possibleParents = [];
    private readonly EventEditModel _model = new();
    private bool _isBusy;

    [Parameter] public int EventId { get; set; }
    [SupplyParameterFromQuery(Name = "groups")] public string? GroupIds { get; set; }
    [SupplyParameterFromQuery(Name = "parent")] public int? ParentId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        if (EventId == 0) // new event
        {
            Event? parent = ParentId.HasValue
                ? await db.Events
                    .Include(p => p.Groups)
                    .FirstOrDefaultAsync(e => e.Id == ParentId)
                : null;

            Event newEvent = new()
            {
                CreatedUtc = new(),
                StartUtc = DateTime.UtcNow,
                Title = "",
                Parent = parent
            };

            if (string.IsNullOrEmpty(GroupIds))
                return;

            List<int> groupIds = GroupIds.Split(',').Select(int.Parse).ToList();

            List<Page> groups = await db.Groups
                .Where(g => groupIds.Contains(g.Id))
                .ToListAsync();
            newEvent.Groups.AddRange(groups);

            _event = newEvent;
        }
        else // editing
        {
            _event = await db.Events
                .Include(e => e.Parent)
                .Include(e => e.Groups)
                .FirstOrDefaultAsync(e => e.Id == EventId);
            if (_event == null)
                return;
        }

        _model.Start = TimeZoneInfo.ConvertTimeFromUtc(_event.StartUtc, Utils.HungarianTimeZone);
        _model.End = _event.EndUtc.HasValue
            ? TimeZoneInfo.ConvertTimeFromUtc(_event.EndUtc.Value, Utils.HungarianTimeZone)
            : _model.Start;
        _model.Title = _event.Title;
        _model.DescriptionMarkdown = _event.DescriptionMarkdown;
        if (_event.Parent != null)
        {
            _possibleParents.Add(_event.Parent);
            _model.ParentId = _event.Parent.Id;
        }
    }

    private async Task OnValidSubmit()
    {
        if (_isBusy) return;
        _isBusy = true;

        await using var scope = ServiceProvider.CreateAsyncScope();
        var eventService = scope.ServiceProvider.GetRequiredService<EventService>();

        Event savedEvent = await eventService.Save(
            await User,
            EventId,
            _event!.ParentId,
            _event.Groups.Select(e => e.Id).ToList(),
            _model.Title,
            _model.DescriptionMarkdown,
            TimeZoneInfo.ConvertTimeToUtc(_model.Start, Utils.HungarianTimeZone),
            TimeZoneInfo.ConvertTimeToUtc(_model.End, Utils.HungarianTimeZone)
        );

        Navigation.NavigateTo($"/events/{savedEvent.Id}");
    }

    private class EventEditModel
    {
        public DateTime Start
        {
            get;
            set
            {
                var oldVal = field;
                field = value;
                UpdateEnd(oldVal);
            }
        }

        public DateTime End { get; set; }
        public int? ParentId { get; set; }
        [Length(1, 100)] public string Title { get; set; } = "";
        [MaxLength(20000)] public string? DescriptionMarkdown { get; set; }

        private void UpdateEnd(DateTime oldStart)
        {
            TimeSpan eventLength = End - oldStart;
            End = Start + eventLength;
        }
    }

}
