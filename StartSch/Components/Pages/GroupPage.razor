@page "/groups/{GroupId:int}"
@inherits ResourcePage
@inject Db Db
@inject IAuthorizationService Auth

@if (!IsResourceAvailable(_group, null, out var status))
{
    <ResourceUnavailable Status="@status"/>
    return;
}

<main>
    <article class="post">
        <header class="display">
            <Title>@(_group.PincerName ?? _group.PekName)</Title>
        </header>

        <ul class="label-list">
            @if (_group.PincerId.HasValue)
            {
                <li class="label">
                    <icon>restaurant</icon>
                    <a href="https://schpincer.sch.bme.hu/provider/@_group.PincerId">
                        SCH-Pincér
                    </a>
                </li>
            }
        </ul>

        <AuthorizeView Policy="GroupAdmin" Resource="@_group">
            <div style="margin-top: 16px; display: flex; gap: 8px">
                <FilledButton Href="@($"/events/0/edit?groups={_group.Id}")">
                    <icon>calendar_add_on</icon>
                    <span>
                        Új esemény
                    </span>
                </FilledButton>
                <FilledTonalButton Href="@($"/posts/0/edit?groups={_group.Id}")">
                    <icon>chat_add_on</icon>
                    <span>
                        Új poszt
                    </span>
                </FilledTonalButton>
            </div>
        </AuthorizeView>
    </article>

    <hr>

    <section>
        <h2>Történet</h2>
        @foreach (object item in _items)
        {
            <div @key="@GetKey(item)">
                @switch (item)
                {
                    case Post post:
                        <PostPreview Post="@post" KnownGroupId="@GroupId"/>
                        break;
                    case Event e:
                        <EventPreviewTree Event="@e" KnownGroupId="@GroupId"/>
                        break;
                }
            </div>
        }
    </section>
</main>

@code {
    private Page? _group;
    private readonly List<object> _items = [];
    [Parameter] public int GroupId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _group = await Db.Groups.FirstOrDefaultAsync(g => g.Id == GroupId);
        if (_group == null)
            return;

        var query = await CreatePostQuery(_group, Db);
        List<Post> posts = await query
            .Take(30)
            .ToListAsync();

        List<Event> events = await CreateEventQuery(_group, Db)
            .Take(30)
            .ToListAsync();

        _items.AddRange(posts.Where(p => p.Event == null));
        _items.AddRange(events.Where(e => e.Parent == null));

        _items.Sort((a, b) => GetDate(b).CompareTo(GetDate(a)));
    }

    private async Task<IQueryable<Post>> CreatePostQuery(Page page, Db db)
    {
        // https://learn.microsoft.com/en-us/ef/core/querying/related-data/explicit#querying-related-entities
        IQueryable<Post> query = db.Posts.GetPostsForGroup(page.Id);
        if (!await IsAdmin()) query = query
            .Where(p => p.PublishedUtc.HasValue);
        return query
            .Include(p => p.Groups)
            .Include(p => p.Event)
            .OrderBy(p => p.PublishedUtc.HasValue) // drafts first
            .ThenByDescending(p => p.PublishedUtc)
            .ThenByDescending(p => p.CreatedUtc); // order drafts
    }

    private static IQueryable<Event> CreateEventQuery(Page page, Db db)
    {
        return db.Events.GetEventsForGroup(page.Id)
            .Include(e => e.Groups)
            .OrderByDescending(e => e.StartUtc);
    }

    private async Task<bool> IsAdmin()
    {
        var adminAuthorization = await Auth.AuthorizeAsync(
            await User,
            _group,
            PageAdminRequirement.Instance);
        return adminAuthorization.Succeeded;
    }

    private static DateTime GetDate(object item) => item switch
        {
            Post post => post.PublishedUtc ?? post.CreatedUtc,
            Event @event => @event.CreatedUtc,
            _ => throw new InvalidOperationException()
        };

    private static int GetKey(object item) => item switch
        {
            Post post => post.Id,
            Event @event => int.MaxValue - @event.Id,
            _ => throw new InvalidOperationException()
        };

}
