@page "/pages/{PageId:int}"
@using StartSch.Services
@inherits ResourcePage
@inject Db Db
@inject IAuthorizationService Auth
@inject InterestService InterestService

@if (!IsResourceAvailable(_page, null, out var status))
{
    <ResourceUnavailable Status="@status"/>
    return;
}

<main>
    <article class="post">
        <header class="display">
            <Title>@(_page.GetName())</Title>
        </header>

        <ul class="label-list">
            @if (_page.PincerId.HasValue)
            {
                <li class="label">
                    <md-icon>restaurant</md-icon>
                    <a href="https://schpincer.sch.bme.hu/provider/@_page.PincerId">
                        SCH-Pincér
                    </a>
                </li>
            }
            
            @if (_page.ExternalUrl is {} url)
            {
                <li class="label">
                    <md-icon>open_in_new</md-icon>
                    <a href="@url">
                        @url.TryRemoveFromStart("https://").ToString()
                    </a>
                </li>
            }
        </ul>

        <AuthorizeView Policy="@PageAdminRequirement.Policy" Resource="@_page">
            <div style="margin-top: 16px; display: flex; gap: 8px">
                <md-filled-button href="@($"/events/0/edit?categories={_page.Id}")">
                    <md-icon slot="icon">calendar_add_on</md-icon>
                    <span>
                        Új esemény
                    </span>
                </md-filled-button>
                <md-filled-tonal-button href="@($"/posts/0/edit?categories={_page.Id}")">
                    <md-icon slot="icon">chat_add_on</md-icon>
                    <span>
                        Új poszt
                    </span>
                </md-filled-tonal-button>
            </div>
        </AuthorizeView>
    </article>

    <hr>

    <section>
        <h2>Történet</h2>
        @foreach (object item in _items)
        {
            <div @key="@GetKey(item)">
                @switch (item)
                {
                    case Post post:
                        <PostPreview Post="@post" KnownPageId="@PageId"/>
                        break;
                    case Event e:
                        <EventPreviewTree Event="@e" KnownPageId="@PageId"/>
                        break;
                }
            </div>
        }
    </section>
</main>

@code {
    private Page? _page;
    private readonly List<object> _items = [];
    [Parameter] public int PageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isAdminTask = IsAdmin();
        
        await InterestService.LoadIndex;
        
        _page = await Db.Pages.FirstOrDefaultAsync(g => g.Id == PageId);
        if (_page == null)
            return;

        var postsAndEvents = await Db
            .SelectPostsAndEventsInCategories(
                CategoryUtils
                    .FlattenIncludedCategories(_page.Categories)
                    .Select(c => c.Id)
            )
            .OrderByDescending(x => x.Date)
            .ToListAsync();

        var postIds = postsAndEvents.Where(x => x.PostId != 0).Select(x => x.PostId);
        var eventIds = postsAndEvents.Where(x => x.EventId != 0).Select(x => x.EventId);

        var postsQuery = Db.Posts
            .Include(p => p.PostCategories)
            .Where(p => postIds.Contains(p.Id));
        if (!await isAdminTask) postsQuery = postsQuery
            .Where(p => p.Published.HasValue);
        var posts = await postsQuery
            .Include(p => p.Event)
            .OrderBy(p => p.Published.HasValue) // drafts first
            .ThenByDescending(p => p.Published)
            .ThenByDescending(p => p.Created) // order drafts
            .ToListAsync();

        var events = await Db.Events
            .Where(e => eventIds.Contains(e.Id))
            .Include(e => e.EventCategories)
            .OrderByDescending(e => e.Start)
            .ToListAsync();

        _items.AddRange(posts.Where(p => p.Event == null));
        _items.AddRange(events.Where(e => e.Parent == null));

        _items.Sort((a, b) => GetDate(b).CompareTo(GetDate(a)));
    }

    private async Task<bool> IsAdmin()
    {
        var adminAuthorization = await Auth.AuthorizeAsync(
            await User,
            _page,
            PageAdminRequirement.Instance);
        return adminAuthorization.Succeeded;
    }

    private static DateTime GetDate(object item) => item switch
        {
            Post post => post.Published ?? post.Created,
            Event @event => @event.Start ?? @event.Created,
            _ => throw new InvalidOperationException()
        };

    private static int GetKey(object item) => item switch
        {
            Post post => post.Id,
            Event @event => int.MaxValue - @event.Id,
            _ => throw new InvalidOperationException()
        };

}
