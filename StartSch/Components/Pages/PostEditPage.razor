@page "/posts/{PostId:int}/edit"
@inject IDbContextFactory<Db> DbFactory
@inject NavigationManager Nav
@inject IServiceProvider ServiceProvider
@using StartSch.Services
@inherits ResourcePage
@rendermode InteractiveServerWithoutPrerendering

@if (!IsResourceAvailable(_post, ResourceAccessRequirement.Write, out var unavailableStatus))
{
    <ResourceUnavailable Status="@unavailableStatus"/>
    return;
}

<div style="display: flex; gap: 32px">
    <div style="flex: 1">
        @if (PostId == 0)
        {
            <Title>Új poszt</Title>
        }
        else
        {
            <Title>Poszt szerkesztés</Title>
        }

        <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit" FormName="NewPost">

            <div>
                <label>
                    <span style="display: block">
                        Cím
                    </span>
                    <InputText @bind-Value="@_model.Title"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Esemény
                    </span>
                    <InputSelect @bind-Value="@_model.EventId">
                        <option value=""></option>
                        @foreach (var e in _relevantEvents)
                        {
                            <option value="@e.Id">
                                @e.Title
                                @if (e.StartUtc.HasValue)
                                {
                                    @: - @Utils.FormatDateRange(e.StartUtc.Value, e.EndUtc)
                                }
                            </option>
                        }
                    </InputSelect>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Tartalom
                        <small>(Markdown/HTML)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 256px; font-family: monospace"
                        @bind-Value="@_model.ContentMarkdown"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Kivonat <small>(opcionális)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 128px; font-family: monospace"
                        @bind-Value="@_model.ExcerptMarkdown"/>
                </label>
            </div>

            <div style="display: flex; gap: 8px; margin-top: 8px">
                @if (_post.PublishedUtc == null)
                {
                    <FilledButton OnClick="@(() => _action = PostAction.Publish)" type="submit" Disabled="@_isBusy">
                        Közzététel
                    </FilledButton>
                    <TextButton OnClick="@(() => _action = PostAction.Save)" type="submit" Disabled="_isBusy">
                        Mentés későbbre
                    </TextButton>
                }
                else
                {
                    <FilledButton OnClick="@(() => _action = PostAction.Save)" type="submit" Disabled="@_isBusy">
                        Frissítés
                    </FilledButton>
                }

                @if (_post.Id != 0)
                {
                    <div style="flex: 1"></div>
                    <TextButton Href="@($"/posts/{_post.Id}/delete")" Class="error" Disabled="@_isBusy">
                        Törlés
                    </TextButton>
                }
            </div>
        </EditForm>
    </div>

    <div style="flex: 1" class="edit-preview-container">

        @{
            _post.Title = _model.Title;
            _post.ContentMarkdown = _model.ContentMarkdown;
            _post.ExcerptMarkdown = _model.ExcerptMarkdown;
            _post.Event = _relevantEvents.FirstOrDefault(e => e.Id == _model.EventId);
        }
        <PostEditPreview Post="_post"/>

    </div>
</div>

@code {

    // /posts/0/edit?categories=1,2&event=1
    // - new post, set initial relationships from queries
    // - groups are set from query
    //
    // /posts/1/edit
    // - edit post
    // - groups must not change
    //
    // A post is owned by at least one group and can optionally belong to an event.
    //
    // A user must not be able to write a post in the name of a group they are not an admin of, unless the post
    // belongs to an event with every group (signifying an agreement between the groups).
    //
    // Event can always be modified, but if it is set:
    // - post.Groups must be a subset of event.Groups
    // - user must be a part of at least one of post.Groups
    //
    // If the event is not set, the post must belong to a single group, which the user must be an admin of

    private readonly List<Event> _relevantEvents = [];
    private Post? _post;
    private PostAction _action = PostAction.Publish;
    private readonly NewPostModel _model = new();
    private bool _isBusy;

    [Parameter] public int PostId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "categories")]
    public string? CategoryIds { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "event")]
    public int? EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        if (PostId == 0) // new post
        {
            Post post = new() { CreatedUtc = new() };

            if (string.IsNullOrEmpty(CategoryIds))
                return;

            List<int> categoryIds = CategoryIds.Split(',').Select(int.Parse).ToList();

            List<Category> categories = await db.Categories
                .Include(c => c.Page)
                .Where(c => categoryIds.Contains(c.Id))
                .ToListAsync();
            post.Categories.AddRange(categories);

            if (EventId != null)
            {
                Event? @event = await db.Events
                    .Include(e => e.Categories)
                    .ThenInclude(c => c.Page)
                    .FirstOrDefaultAsync(e => e.Id == EventId);
                if (@event == null)
                    return;

                post.Event = @event;
            }

            _model.EventId = EventId;
            _post = post;
        }
        else // editing post
        {
            _post = await db.Posts
                .Include(p => p.Categories)
                .ThenInclude(c => c.Page)
                .Include(p => p.Event)
                .FirstOrDefaultAsync(p => p.Id == PostId);
            if (_post == null)
                return;
            _model.Title = _post.Title;
            _model.ContentMarkdown = _post.ContentMarkdown;
            _model.ExcerptMarkdown = _post.ExcerptMarkdown;
            _model.EventId = _post.Event?.Id;
        }

        if (_post.Event != null)
            _relevantEvents.Add(_post.Event);

        // We need to find all events that the post can belong to (_relevantEvents), without updating categories
        //
        // SQL too hard, only allow updating event for posts owned by a single page
        List<Page> owners = _post.GetOwners();
        if (owners.Count != 1)
            return;
        // Not supported by EF:
        // _relevantEvents.AddRange((await _db.Events
        //         .Include(e => e.Groups)
        //         .Where(e => gs.All(g => e.Groups.Contains(g)))
        //         .OrderByDescending(e => e.StartUtc)
        //         .Take(30)
        //         .ToListAsync())
        //     .Where(e => e != _post.Event));
        // If you smart, open a PR
        Page owner = owners[0];
        _relevantEvents.AddRange((await db.Events
                .Include(e => e.Categories)
                .ThenInclude(c => c.Page)
                .Where(e => e.Categories.Any(c => c.Page == owner))
                .OrderByDescending(e => e.StartUtc)
                .Take(30)
                .ToListAsync())
            .Where(e => e != _post.Event));
    }

    private async Task OnValidSubmit()
    {
        if (_isBusy) return;
        _isBusy = true;

        await using var scope = ServiceProvider.CreateAsyncScope();
        var postService = scope.ServiceProvider.GetRequiredService<PostService>();

        Post post = await postService.Save(
            await User,
            PostId,
            _model.EventId,
            _post!.Categories.Select(c => c.Page.Id).ToList(),
            _model.Title,
            _model.ContentMarkdown,
            _model.ExcerptMarkdown,
            _action);

        Nav.NavigateTo($"/posts/{post.Id}");
    }

    private class NewPostModel
    {
        public int? EventId { get; set; }
        [Length(1, 100)] public string Title { get; set; } = "";
        [MaxLength(20000)] public string? ContentMarkdown { get; set; }
        [MaxLength(1000)] public string? ExcerptMarkdown { get; set; }
    }

}
