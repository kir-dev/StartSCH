@page "/"
@using System.Data
@using System.Globalization
@using StartSch.Components.Layout
@using StartSch.Services
@inject Db Db
@inject InterestService InterestService

@{
    bool hasMore = _posts is { Count: 30 };
    string? nextLink = null;
    if (_posts is { Count: > 0 })
    {
        Post lastPost = _posts[^1];
        nextLink = $"/?after={lastPost.Published:o},{lastPost.Id}";
    }

    var utcNow = DateTime.UtcNow;
}

@if (After != null)
{
    @if (_posts != null)
    {
        <InfiniteList Items="@_posts" HasMore="@hasMore" NextLink="@nextLink">
            <ItemTemplate Context="post">
                <PostPreview Post="post"/>
            </ItemTemplate>
        </InfiniteList>
    }
}
else
{
    <LayoutView Layout="typeof(DocumentLayout)">
        <div id="home-page">
            <header class="top-bar">
                <div id="logo">
                    <a href="/">
                        <Title>
                            <WordmarkLogo/>
                        </Title>
                    </a>
                </div>

                <div id="menu-toggle">
                    <md-icon-button onclick="toggleMenu()">
                        <md-icon>menu</md-icon>
                    </md-icon-button>
                </div>

                <div id="top-level-links">
                    <TopLevelLinks/>
                </div>

                <MiscLinks/>

            </header>

            <div class="scrim" onclick="toggleMenu()"></div>

            <main class="home">
                <div id="left-widgets">
                    @* <section id="events"> *@
                    @*     <h2>Események</h2> *@
                    @*     <article> *@
                    @*         <h3>QPA</h3> *@
                    @*         <article> *@
                    @*             <h4>1. het</h4> *@
                    @*             <article> *@
                    @*                 <h5>Videki nap</h5> *@
                    @*                 <article> *@
                    @*                     <h6>Lejutas</h6> *@
                    @*                 </article> *@
                    @*             </article> *@
                    @*         </article> *@
                    @*     </article> *@
                    @* </section> *@
                </div>

                <div id="right-widgets">
                    <section id="openings">
                        <h2>
                            Nyitások
                        </h2>
                        @if (_openings != null)
                        {
                            foreach (var opening in _openings)
                            {
                                var page = opening.Categories[0].Page;
                                
                                <article>
                                    <div class="title">
                                        <h3 style="display: inline">
                                            <a href="@($"/events/{opening.Id}")">
                                                @opening.Title
                                            </a>
                                        </h3>

                                        @if (opening.Id != 0)
                                        {
                                            <AuthorizeView Policy="Write" Resource="@opening">
                                                <div class="icon-buttons">
                                                    <a title="Új poszt"
                                                       href="/posts/0/edit?categories=@string.Join(',', opening.Categories.Select(g => g.Page.Id))&event=@opening.Id">
                                                        <md-icon>
                                                            chat_add_on
                                                        </md-icon>
                                                    </a>
                                                </div>
                                            </AuthorizeView>
                                        }
                                    </div>

                                    <div style="display: flex; align-items: center; flex-wrap: wrap; gap: 8px">
                                        <CategoryList Categories="@(opening.Categories)"/>

                                        <span class="date-display">
                                            <DateDisplay DateUtc="@opening.Start"/>
                                        </span>
                                        
                                        @{
                                            var orderable = opening is { OutOfStock: null }
                                                            && opening.OrderingStart <= utcNow
                                                            && opening.OrderingEnd >= utcNow;
                                        }

                                        <md-icon-button
                                            style="@(orderable ? "--md-icon-button-icon-color: var(--md-sys-color-secondary)" : null)"
                                            href="https://schpincer.sch.bme.hu/order/@(page.PincerId)">
                                            <md-icon>
                                                @if (orderable)
                                                {
                                                    @:shopping_cart
                                                }
                                                else
                                                {
                                                    @:shopping_cart_off
                                                }
                                            </md-icon>
                                        </md-icon-button>
                                    </div>
                                </article>
                            }

                            if (!_openings.Any())
                            {
                                <p>
                                    <small>
                                        Nincs bejelentett nyitás.
                                    </small>
                                </p>
                            }
                        }


                        <div style="margin-top: 16px; text-align: end">
                            <a href="/openings"
                               style="color: var(--md-sys-color-on-surface-variant); font-variation-settings: 'opsz' 16, 'wdth' 100, 'GRAD' 100">
                                Korábbi nyitások
                                <md-icon style="translate: 0 3px">chevron_right</md-icon>
                            </a>
                        </div>
                    </section>

                    <section id="about">
                        <MiscLinks/>
                    </section>
                </div>

                <section id="news">
                    <PushCheckBanner/>

                    <h2 style="border-bottom: var(--dotted-border); padding-bottom: 4px; margin-bottom: 24px">
                        Hírek
                    </h2>

                    @if (_posts != null)
                    {
                        <InfiniteList Items="@_posts" HasMore="@hasMore" NextLink="@nextLink">
                            <ItemTemplate Context="post">
                                <PostPreview Post="post"/>
                            </ItemTemplate>
                        </InfiniteList>
                    }

                    <div style="height: 64px"></div>
                </section>
            </main>
        </div>

        <script>
            function toggleMenu() {
                document.body.children[0].classList.toggle("menu-open");
            }
        </script>

    </LayoutView>
}

@code {
    private List<PincerOpening>? _openings;
    private List<Post>? _posts;

    [Parameter, SupplyParameterFromQuery(Name = "after")]
    public string? After { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DateTime utcNow = DateTime.UtcNow;
        await InterestService.LoadIndex;

        await using var tx = await Db.BeginTransaction(IsolationLevel.Snapshot);
        if (After == null)
        {
            _openings = await Db.PincerOpenings
                .Where(o => o.End > utcNow)
                .OrderBy(o => o.Start)
                .Include(o => o.EventCategories)
                .AsSplitQuery()
                .ToListAsync();
        }

        IQueryable<Post> postsQuery = Db.Posts
            .Where(p => p.Published.HasValue)
            .OrderByDescending(p => p.Published)
            .ThenByDescending(p => p.Id);
        if (After != null)
        {
            int comma = After.IndexOf(',');
            DateTime date = DateTime.ParseExact(After.AsSpan(..comma), "o", null, DateTimeStyles.RoundtripKind);
            int postId = int.Parse(After.AsSpan(comma + 1));
            postsQuery = postsQuery.Where(p => p.Published < date || (p.Published == date && p.Id < postId));
        }
        _posts = await postsQuery
            .Take(30)
            .Include(o => o.PostCategories)
            .Include(p => p.Event)
            .AsSplitQuery()
            .ToListAsync();
        await tx.CommitAsync();
    }

}
