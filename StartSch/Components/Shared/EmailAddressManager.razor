@using Microsoft.Extensions.Caching.Memory
@using StartSch.Components.EmailTemplates
@using StartSch.Services
@inject Db Db
@inject IEmailService EmailService
@inject IMemoryCache Cache
@inject BlazorTemplateRenderer TemplateRenderer
@attribute [StreamRendering]

<div style="display: flex; min-width: 300px; max-width: 500px">
    <section style="background-color: var(--md-sys-color-surface-container-high);
                    padding: 8px 16px; flex: 1;
                    border-radius: 16px">
        <h2 style="font-size: 20px">
            Email
        </h2>

        @if (_latestVerificationTime.HasValue)
        {
            <p style="color: var(--md-sys-color-error)">
                Várj @((_latestVerificationTime.Value.AddSeconds(30) - DateTime.UtcNow).Seconds) másodpercet,
                majd kattints a mentés gombra.
            </p>
        }
        else if (_user is { StartSchEmail: not null, StartSchEmailVerified: false })
        {
            <p style="color: var(--md-sys-color-on-surface-variant)">
                Küldtünk egy ellenőrző emailt a <b>@_user.StartSchEmail</b> címre, kérlek kattints a benne található
                linkre az emailcímed módosításához.
            </p>
        }

        <EditForm Enhance Model="@Model" FormName="Email" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <div style="display: flex; align-items: center">
                <InputText
                    type="email"
                    @bind-Value="@Model.Email"
                    style="
                        background-color: var(--md-sys-color-surface);
                        border-radius: 24px 0 0 24px;
                        margin: 8px 0;
                        line-height: 48px;
                        padding: 0 0 0 16px;
                    "/>
                <div style="display: flex; justify-content: end">
                    <md-filled-button type="submit" style="border-radius: 0 24px 24px 0; height: 48px">
                        Mentés
                    </md-filled-button>
                </div>
            </div>
        </EditForm>
    </section>
</div>

@code {
    private User? _user;
    private DateTime? _latestVerificationTime;

    [SupplyParameterFromForm(FormName = "Email")]
    private EmailFormModel Model { get; set; } = new();

    [CascadingParameter] public required Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Guid authSchId = (await AuthenticationState).User.GetAuthSchId()!.Value;
        _user = (await Db.Users.FirstOrDefaultAsync(u => u.AuthSchId == authSchId))!;
        Model.Email ??= _user is { StartSchEmailVerified: true, StartSchEmail: { } email }
            ? email
            : _user.AuthSchEmail;
    }

    private async Task OnValidSubmit()
    {
        string newEmail = Model.Email!;
        if (newEmail == _user!.StartSchEmail && _user.StartSchEmailVerified)
            return;

        _user.StartSchEmailVerified = false;

        if (newEmail == _user.AuthSchEmail)
        {
            _user.StartSchEmail = null;
            await Db.SaveChangesAsync();
            return;
        }

        _user.StartSchEmail = newEmail;

        string cacheKey = nameof(_latestVerificationTime) + _user!.Id;
        if (Cache.TryGetValue(cacheKey, out _latestVerificationTime))
            return;
        Cache.Set(cacheKey, DateTime.UtcNow, TimeSpan.FromSeconds(30));

        await EmailService.Send(
            new SingleSendRequestDto(
                new("StartSCH", null),
                _user.StartSchEmail,
                "StartSCH email ellenőrzés",
                await RenderEmailVerificationEmail(_user.Id, _user.StartSchEmail)
            )
        );

        await Db.SaveChangesAsync();
    }

    class EmailFormModel
    {
        [EmailAddress] public string? Email { get; set; }
    }

    private async Task<string> RenderEmailVerificationEmail(int userId, string emailAddress)
    {
        EmailVerificationData data = new(userId, emailAddress);
        return await TemplateRenderer.Render<EmailVerificationEmailTemplate>(new()
        {
            { nameof(EmailVerificationEmailTemplate.EmailVerificationData), data }
        });
    }

}
