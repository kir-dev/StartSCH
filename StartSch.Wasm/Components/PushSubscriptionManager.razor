@using System.Text.Json.Serialization
@rendermode InteractiveWebAssembly
@inject IJSRuntime Js

@if (!IsEnabled)
    return;

<style>
    .blazor-loading-indicator {
        height: 4px;
        width: var(--blazor-load-percentage, 100%);
        background: linear-gradient(90deg, #0000 33%, var(--md-sys-color-primary) 50%, #0000 66%);
        background-size: 300% 100%;
        animation: l1 1s infinite linear;
    }

    @@keyframes l1 {
        0% {
            background-position: right
        }
    }
</style>

<div style="display: flex; min-width: 300px; max-width: 500px">
    <section style="background-color: var(--md-sys-color-surface-container-high);
                    padding: 8px 16px; flex: 1;
                    border-radius: 16px">
        <h2 style="font-size: 20px">
            Push értesítések
        </h2>
        Állapot:

        @if (_state == null)
        {
            @:...
            <div style="height: 48px; display: flex; align-items: end">
                <div class="blazor-loading-indicator loader"></div>
            </div>
        }
        else
        {
            var otherCount = RegisteredEndpointHashes
                .Except(_state.PrevDeviceEndpoints)
                .Count();
            if (_state.CurrentEndpoint != null && RegisteredEndpointHashes.Contains(_state.CurrentEndpoint))
            {
                if (otherCount > 0)
                {
                    @:aktív ezen és @otherCount másik eszközön
                }
                else
                {
                    @:aktív ezen az eszközön
                }
                <div style="display: flex; justify-content: end; margin-top: 8px">
                    <md-text-button @onclick="@Unsubscribe" class="error">
                        Leiratkozás ezen az eszközön
                    </md-text-button>
                </div>
            }
            else
            {
                if (otherCount > 0)
                {
                    @:aktív @otherCount másik eszközön
                }
                else
                {
                    <span style="color: var(--md-sys-color-error); font-weight: bold">
                        inaktív
                    </span>
                }

                @if (_state.PermissionState == PermissionState.Denied)
                {
                    // TODO: disable push subscribe button when permission is denied and reenable when granted
                    <div style="margin-top: 8px; font-size: 14px; color: var(--md-sys-color-on-surface-variant)">
                        Letiltottad az oldal számára az értesítések küldését. Ha szeretnél értesítéseket kapni ezen az
                        eszközön, engedélyezd az értesítéseket a böngésződ beállításiban.
                    </div>
                }

                <div style="display: flex; justify-content: end; margin-top: 8px">
                    <md-filled-button @onclick="@Subscribe">
                        Beállítás ezen az eszközön
                        @if (otherCount > 0)
                        {
                            @:is
                        }
                    </md-filled-button>
                </div>
            }
        }
    </section>
</div>

@code {

    private PushSubscriptionState? _state;

    [Parameter] public bool IsEnabled { get; set; }

    /// Hashes of push endpoints registered in the database
    [Parameter, EditorRequired]
    public required List<string> RegisteredEndpointHashes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!OperatingSystem.IsBrowser() || !IsEnabled)
            return;

        await RefreshState();
    }

    private async Task Subscribe()
    {
        _state = null;
        string? endpoint = await Js.InvokeAsync<string?>("subscribeToPushNotifications");
        if (endpoint != null)
        {
            endpoint = SharedUtils.ComputeSha256(endpoint);
            if (!RegisteredEndpointHashes.Contains(endpoint))
                RegisteredEndpointHashes.Add(endpoint);
        }

        await RefreshState();
    }

    private async Task Unsubscribe()
    {
        _state = null;
        await Js.InvokeVoidAsync("unsubscribeFromPushNotifications");
        await RefreshState();
    }

    private async Task RefreshState()
    {
        _state = await Js.InvokeAsync<PushSubscriptionState>("getPushSubscriptionState");
        _state = _state with
        {
            CurrentEndpoint = _state.CurrentEndpoint != null
                ? SharedUtils.ComputeSha256(_state.CurrentEndpoint)
                : null,
            PrevDeviceEndpoints = _state.PrevDeviceEndpoints
                .Select(SharedUtils.ComputeSha256)
                .ToHashSet(),
        };
    }

    record PushSubscriptionState(
        // Hashes of push endpoints exposed by this device since the page loaded
        HashSet<string> PrevDeviceEndpoints,
        string? CurrentEndpoint,
        PermissionState PermissionState
    );

    [JsonConverter(typeof(JsonStringEnumConverter<PermissionState>))]
    enum PermissionState
    {
        Default,
        Denied,
        Granted,
    }

}
